# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19NxMAROWASwU4oCiHFC7q9m7EYdTzFBJ
"""

import streamlit as st
import subprocess
import os
from pydub import AudioSegment
from tempfile import NamedTemporaryFile

from transformers import pipeline
import torch
import torchaudio

# Title
st.title("üéôÔ∏è English Accent Detector")
st.markdown("Upload a video file and we'll detect the English accent spoken in it.")

# Upload video
uploaded_file = st.file_uploader("Upload video (mp4, mov, avi, mkv)", type=["mp4", "mov", "avi", "mkv"])

# Accent classifier
@st.cache_resource
def load_pipeline():
    classifier = pipeline(
        "audio-classification",
        model="sandro-h/English-Accent-Classification",
        device=0 if torch.cuda.is_available() else -1
    )
    return classifier

classifier = load_pipeline()

if uploaded_file:
    st.info("Processing your video...")

    # Save video temporarily
    with NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video:
        temp_video.write(uploaded_file.read())
        video_path = temp_video.name

    # Define temp audio path
    audio_path = video_path.replace(".mp4", ".wav")

    # Extract audio using ffmpeg
    try:
        subprocess.run([
            "ffmpeg", "-y", "-i", video_path,
            "-vn", "-acodec", "pcm_s16le",
            "-ar", "16000", "-ac", "1",  # mono, 16kHz
            audio_path
        ], check=True)

        # Preview audio
        st.audio(audio_path, format="audio/wav")

        # Load audio
        waveform, sample_rate = torchaudio.load(audio_path)

        # Run classification
        result = classifier(audio_path)
        top_result = result[0]

        # Show prediction
        st.success(f"**Accent:** {top_result['label']}")
        st.info(f"**Confidence:** {top_result['score']:.2%}")

    except subprocess.CalledProcessError as e:
        st.error("‚ùå Error extracting audio with ffmpeg.")
        st.text(str(e))