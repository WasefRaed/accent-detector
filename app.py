# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19NxMAROWASwU4oCiHFC7q9m7EYdTzFBJ
"""

import streamlit as st
import tempfile
import os
from moviepy.editor import VideoFileClip
import torch
from transformers import Wav2Vec2ForSequenceClassification, Wav2Vec2Processor
import torchaudio
import numpy as np

# Load pre-trained accent classification model
@st.cache_resource
def load_model():
    model_name = "saattrupdan/accent-classifier"
    model = Wav2Vec2ForSequenceClassification.from_pretrained(model_name)
    processor = Wav2Vec2Processor.from_pretrained(model_name)
    return model, processor

model, processor = load_model()

# Audio processing function
def process_audio(file_path):
    speech_array, sampling_rate = torchaudio.load(file_path)
    if sampling_rate != 16000:
        resampler = torchaudio.transforms.Resample(orig_freq=sampling_rate, new_freq=16000)
        speech_array = resampler(speech_array)
    return speech_array.squeeze().numpy()

# Prediction function
def predict_accent(file_path):
    audio = process_audio(file_path)
    inputs = processor(audio, sampling_rate=16000, return_tensors="pt", padding=True)
    with torch.no_grad():
        logits = model(**inputs).logits
    predicted_class_id = torch.argmax(logits).item()
    score = torch.softmax(logits, dim=1)[0][predicted_class_id].item()
    label = model.config.id2label[predicted_class_id]
    return label, score

# Streamlit UI
st.title("üéôÔ∏è English Accent Classifier")

uploaded_file = st.file_uploader("Upload a video (MP4 or MOV) or audio (WAV, MP3)", type=["mp4", "mov", "wav", "mp3"])

if uploaded_file is not None:
    with tempfile.NamedTemporaryFile(delete=False, suffix=uploaded_file.name) as tmp:
        tmp.write(uploaded_file.read())
        tmp_path = tmp.name

    audio_path = tmp_path

    # If video, extract audio
    if uploaded_file.type.startswith("video"):
        audio_path = tmp_path + ".wav"
        try:
            clip = VideoFileClip(tmp_path)
            clip.audio.write_audiofile(audio_path, codec='pcm_s16le')
        except Exception as e:
            st.error(f"‚ùå Error extracting audio from video: {e}")
            os.remove(tmp_path)
            st.stop()

    st.audio(audio_path)
    with st.spinner("Analyzing..."):
        try:
            label, score = predict_accent(audio_path)
            st.success(f"‚úÖ Detected Accent: **{label}** with **{score:.2%}** confidence")
        except Exception as e:
            st.error(f"‚ùå Error analyzing audio: {e}")

    os.remove(tmp_path)
    if audio_path != tmp_path:
        os.remove(audio_path)