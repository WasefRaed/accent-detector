# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19NxMAROWASwU4oCiHFC7q9m7EYdTzFBJ
"""

import streamlit as st
import torch
from transformers import Wav2Vec2ForCTC, Wav2Vec2Processor
import moviepy.editor as mp
import tempfile
import requests
import os

# Constants
MODEL_ID = "facebook/wav2vec2-base-960h"

@st.cache_resource
def load_model():
    processor = Wav2Vec2Processor.from_pretrained(MODEL_ID)
    model = Wav2Vec2ForCTC.from_pretrained(MODEL_ID)
    return processor, model

processor, model = load_model()

def download_video(url):
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception("Failed to download video.")

    tmp_video = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
    tmp_video.write(response.content)
    tmp_video.close()
    return tmp_video.name

def extract_audio(video_path):
    video = mp.VideoFileClip(video_path)
    audio_path = tempfile.NamedTemporaryFile(delete=False, suffix=".wav").name
    video.audio.write_audiofile(audio_path, codec='pcm_s16le')
    return audio_path

def transcribe(audio_path):
    import torchaudio
    speech_array, sampling_rate = torchaudio.load(audio_path)
    resampler = torchaudio.transforms.Resample(orig_freq=sampling_rate, new_freq=16000)
    speech = resampler(speech_array).squeeze()

    inputs = processor(speech, sampling_rate=16000, return_tensors="pt", padding=True)
    with torch.no_grad():
        logits = model(**inputs).logits

    predicted_ids = torch.argmax(logits, dim=-1)
    transcription = processor.decode(predicted_ids[0])
    return transcription

def detect_accent(text):
    # Placeholder: Use rule-based keywords for now
    if any(word in text.lower() for word in ["mate", "cheers", "bloody"]):
        return "British", 85, "Common British expressions detected."
    elif any(word in text.lower() for word in ["dude", "awesome", "gotta"]):
        return "American", 90, "Informal American-style phrases detected."
    else:
        return "Unknown", 60, "Accent not confidently detected."

# UI
st.title("üéôÔ∏è English Accent Detection Tool")
st.write("Upload a video URL and get an estimated English accent classification.")

video_url = st.text_input("Enter public video URL (e.g. MP4, Loom):")

if st.button("Analyze Accent"):
    try:
        with st.spinner("Downloading video..."):
            video_path = download_video(video_url)

        with st.spinner("Extracting audio..."):
            audio_path = extract_audio(video_path)

        with st.spinner("Transcribing speech..."):
            text = transcribe(audio_path)

        with st.spinner("Detecting accent..."):
            accent, confidence, reason = detect_accent(text)

        st.success(f"‚úÖ Detected Accent: **{accent}**")
        st.write(f"**Confidence Score:** {confidence}%")
        st.write(f"**Explanation:** {reason}")
        st.write(f"**Transcription:** {text}")

        os.remove(video_path)
        os.remove(audio_path)

    except Exception as e:
        st.error(f"‚ùå Error: {e}")